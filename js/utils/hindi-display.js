// Simple Hindi Display Solution
// Add this code at the END of your existing app.js file (don't replace anything)
// This will only change the display text without affecting any functionality

// Function to update display text to Hindi
function updateDisplayToHindi() {
    // Update tab display text only
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(tab => {
        const tabName = tab.getAttribute('data-tab');
        switch(tabName) {
            case 'overview':
                tab.textContent = '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡•É‡§∑‡•ç‡§†';
                break;
            case 'matrix':
                tab.textContent = '‡§ö‡§æ‡§∞‡•ç‡§ü';
                break;
            case 'transitions':
                tab.textContent = '‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§¶‡§≤‡§æ‡§µ';
                break;
            case 'definitions':
                tab.textContent = '‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç ';
                break;
        }
    });
    
    // Update info section titles
    const updateInfoSections = () => {
        // Matrix section
        const matrixInfo = document.querySelector('#matrix-content .info-title');
        if (matrixInfo && matrixInfo.textContent === '24 Thana Matrix') {
            matrixInfo.textContent = '‡•®‡•™ ‡§†‡§æ‡§£‡§æ ‡§ö‡§æ‡§∞‡•ç‡§ü';
        }
        
        const matrixDesc = document.querySelector('#matrix-content .info-description');
        if (matrixDesc) {
            matrixDesc.innerHTML = `
                ‡•ß‡•™ ‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® ‡§Æ‡•á‡§Ç ‡•®‡•™ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£‡•§
                ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ñ‡§æ‡§®‡•á ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç - ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§ ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§ ‡§ó‡•Å‡§£‡•ã‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§
                ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§∞‡•ç‡§• ‡§ú‡§æ‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§® ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
            `;
        }
        
        // Transitions section  
        const transitionsInfo = document.querySelector('#transitions-content .info-title');
        if (transitionsInfo && transitionsInfo.textContent === 'Spiritual Progression Paths') {
            transitionsInfo.textContent = '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ï‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ó';
        }
        
        const transitionsDesc = document.querySelector('#transitions-content .info-description');
        if (transitionsDesc) {
            transitionsDesc.innerHTML = `
                ‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡•ç‡§§‡§∞ ‡§∏‡•á ‡§Ü‡§ó‡•á ‡§Ø‡§æ ‡§™‡•Ä‡§õ‡•á ‡§ú‡§æ‡§®‡•á ‡§ï‡•á ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§®‡§ø‡§Ø‡§Æ ‡§π‡•à‡§Ç‡•§
                ‡§Ø‡•á ‡§®‡§ø‡§Ø‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§î‡§∞ ‡§ï‡§∞‡•ç‡§Æ‡•ã‡§Ç ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡§Ç‡•§
                ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡•ã‡§π‡§£ ‡§§‡§•‡§æ ‡§Ö‡§µ‡§∞‡•ã‡§π‡§£ ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ‡•§
            `;
        }
        
        // Definitions section
        const defsInfo = document.querySelector('#definitions-content .info-title');
        if (defsInfo && defsInfo.textContent === 'Comprehensive Definitions') {
            defsInfo.textContent = '‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç ';
        }
        
        const defsDesc = document.querySelector('#definitions-content .info-description');
        if (defsDesc) {
            defsDesc.innerHTML = `
                ‡§á‡§∏ ‡§ê‡§™ ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§ø‡§è ‡§ó‡§è ‡§∏‡§≠‡•Ä ‡§ú‡•à‡§® ‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§∞‡§≤ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ‡•§
                ‡§Ö‡§∞‡•ç‡§• ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•ã‡§ú‡•á‡§Ç ‡§Ø‡§æ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§
            `;
        }
        
        // Update matrix selector label
        const matrixLabel = document.querySelector('label[for="matrix-selector"]');
        if (!matrixLabel) {
            const matrixSelector = document.getElementById('matrix-selector');
            if (matrixSelector && matrixSelector.previousElementSibling) {
                const label = matrixSelector.previousElementSibling;
                if (label && label.textContent === 'Matrix View:') {
                    label.textContent = '‡§ö‡§æ‡§∞‡•ç‡§ü ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:';
                }
            }
        }
        
        // Update matrix selector options
        const matrixSelector = document.getElementById('matrix-selector');
        if (matrixSelector) {
            const options = matrixSelector.querySelectorAll('option');
            options.forEach(option => {
                switch(option.value) {
                    case 'default':
                        option.textContent = '‡§†‡§æ‡§£‡§æ-‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® (‡•®‡•™√ó‡•ß‡•™)';
                        break;
                    case 'gati':
                        option.textContent = '‡§ó‡§§‡§ø ‡§ö‡§æ‡§∞‡•ç‡§ü (‡•™√ó‡•®‡•™)';
                        break;
                    case 'indriya':
                        option.textContent = '‡§á‡§Ç‡§¶‡•ç‡§∞‡§ø‡§Ø ‡§ö‡§æ‡§∞‡•ç‡§ü (‡•´√ó‡•®‡•™)';
                        break;
                }
            });
        }
        
        // Update subtitle in header
        const subtitle = document.querySelector('.app-subtitle');
        if (subtitle && subtitle.textContent === 'Complete Spiritual Journey Mapping') {
            subtitle.textContent = '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä';
        }
        
        // Update definition search placeholder
        const defSearch = document.getElementById('definition-search');
        if (defSearch) {
            defSearch.placeholder = '‡§∂‡§¨‡•ç‡§¶ ‡§ñ‡•ã‡§ú‡•á‡§Ç (‡§π‡§ø‡§Ç‡§¶‡•Ä/‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç)...';
        }
        
        // Update tooltip stats labels
        const updateTooltipLabels = () => {
            const statLabels = document.querySelectorAll('.stat-label');
            statLabels.forEach(label => {
                switch(label.textContent) {
                    case 'Present':
                        label.textContent = '‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§';
                        break;
                    case 'Absent':
                        label.textContent = '‡§Ö‡§®‡•Å‡§™‡§∏‡•ç‡§•‡§ø‡§§';
                        break;
                    case 'Total':
                        label.textContent = '‡§ï‡•Å‡§≤';
                        break;
                }
            });
        };
        
        // Watch for tooltip modal to appear and update labels
        const tooltipObserver = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.target.id === 'tooltip-modal' && 
                    !mutation.target.classList.contains('hidden')) {
                    updateTooltipLabels();
                }
            });
        });
        
        const tooltipModal = document.getElementById('tooltip-modal');
        if (tooltipModal) {
            tooltipObserver.observe(tooltipModal, { 
                attributes: true, 
                attributeFilter: ['class'] 
            });
        }
    };
    
    // Update Overview section with Hindi
    const updateOverviewSection = () => {
        // This will be called when overview is loaded
        const sourceTitle = document.querySelector('#gunasthan-list h3');
        if (sourceTitle && sourceTitle.textContent === 'Source Material') {
            sourceTitle.textContent = '‡§∏‡•ç‡§∞‡•ã‡§§ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä';
            
            // Update source description
            const sourceDesc = sourceTitle.parentElement.nextElementSibling;
            if (sourceDesc) {
                sourceDesc.innerHTML = `
                    ‡§Ø‡§π ‡§ê‡§™ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§É ‡§™‡•ç‡§∞‡§æ‡§Æ‡§æ‡§£‡§ø‡§ï ‡§ó‡•ç‡§∞‡§Ç‡§• ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à:
                    <strong style="color: #0ea5e9;">‡§∂‡•ç‡§∞‡•Ä ‡§ö‡•å‡§¨‡•Ä‡§∏ ‡§†‡§æ‡§£‡§æ ‡§ö‡§∞‡•ç‡§ö‡§æ</strong> 
                    ‡§≤‡•á‡§ñ‡§ï - ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§™‡§ï ‡§Æ‡•Å‡§®‡§ø ‡§∂‡•ç‡§∞‡•Ä ‡§™‡•ç‡§∞‡§∂‡§æ‡§Ç‡§§‡§∏‡§æ‡§ó‡§∞ ‡§ú‡•Ä ‡§Æ‡§π‡§æ‡§∞‡§æ‡§ú‡•§ 
                    ‡§∏‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ, ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§á‡§∏ ‡§™‡•ç‡§∞‡§æ‡§Æ‡§æ‡§£‡§ø‡§ï ‡§∏‡•ç‡§∞‡•ã‡§§ ‡§∏‡•á ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡•Ä‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≤‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç‡•§
                `;
            }
            
            // Update button text
            const sourceButton = sourceTitle.parentElement.parentElement.querySelector('button');
            if (sourceButton && sourceButton.textContent.includes('View Original PDF')) {
                sourceButton.innerHTML = 'üìÑ ‡§Æ‡•Ç‡§≤ PDF ‡§¶‡•á‡§ñ‡•á‡§Ç';
            }
        }
        
        // Update overview cards
        const gunasthanTitle = document.querySelector('#gunasthan-list h3:last-of-type');
        if (gunasthanTitle && gunasthanTitle.textContent.includes('14 Gunasthans')) {
            gunasthanTitle.innerHTML = 'üõï ‡•ß‡•™ ‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® - ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•á ‡§ö‡§∞‡§£';
        }
        
        // Update navigation cards in overview
        const cards = document.querySelectorAll('#gunasthan-list [onclick*="Tab"]');
        cards.forEach(card => {
            const titleDiv = card.querySelector('div[style*="font-weight: 600"]');
            const subtitleDiv = card.querySelector('div[style*="font-size: 12px"]');
            
            if (titleDiv && subtitleDiv) {
                if (titleDiv.textContent === 'Matrix View') {
                    titleDiv.textContent = '‡§ö‡§æ‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç';
                    subtitleDiv.textContent = '‡•®‡•™ ‡§†‡§æ‡§£‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£';
                } else if (titleDiv.textContent === 'Transitions') {
                    titleDiv.textContent = '‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® ‡§¨‡§¶‡§≤‡§æ‡§µ';
                    subtitleDiv.textContent = '‡§ó‡•Å‡§£‡§∏‡•ç‡§•‡§æ‡§® ‡§Ü‡§∞‡•ã‡§π‡§£-‡§Ö‡§µ‡§∞‡•ã‡§π‡§£';
                } else if (titleDiv.textContent === 'Definitions') {
                    titleDiv.textContent = '‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ‡§è‡§Ç ';
                    subtitleDiv.textContent = '‡§∏‡§Ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∂‡§¨‡•ç‡§¶‡§ï‡•ã‡§∂';
                }
            }
        });
    };
    
    // Run updates
    updateInfoSections();
    
    // Watch for overview content to be loaded
    const overviewObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.target.id === 'gunasthan-list' && mutation.addedNodes.length > 0) {
                setTimeout(updateOverviewSection, 100);
            }
        });
    });
    
    const gunasthanList = document.getElementById('gunasthan-list');
    if (gunasthanList) {
        overviewObserver.observe(gunasthanList, { childList: true });
        // Also try to update immediately if content is already there
        if (gunasthanList.children.length > 0) {
            updateOverviewSection();
        }
    }
}

// Call this function after the DOM is loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(updateDisplayToHindi, 100);
    });
} else {
    // DOM is already loaded
    setTimeout(updateDisplayToHindi, 100);
}

// Also update when tabs are switched
const originalShowTab = window.showTab;
if (originalShowTab) {
    window.showTab = function(tabName) {
        originalShowTab(tabName);
        setTimeout(updateDisplayToHindi, 50);
    };
}
